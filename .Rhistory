p("App Link: https://geraldlee.shinyapps.io/airbnb_priceR/"),
p("Code Link: https://github.com/gl2668/airbnb_priceR"),
br(),
br(),
p("The 'Map by Price' of our app referenced some code from RPubs-NYC Maps(Aurthor:Jake Hofman)."),
p("Code Link: https://rpubs.com/jhofman/nycmaps"),
br(),
br(),
p("The dynamic plot code used in the 'Suggestions and Neighborhood Info' referenced some code from Github (Author:wch)."),
p("Code Link: https://gist.github.com/wch/5436415/"),
br(),
br(),
p("The datasets used in our app are from Inside Airbnb."),
p("Link: http://insideairbnb.com/get-the-data.html"),
br(),
br(),
p("We based our amenities options on our data and this Airbnb article."),
p("Link: https://www.airbnb.com/resources/hosting-homes/a/the-amenities-guests-want-25"))
)
)
)
)
##### server #####
server <- function(input, output) {
##### Data Table Output #####
data_1 <- reactive({if (input$workspace == TRUE){
subset(AB_All, workspace == 1)} else{
AB_All
}
})
data_2 <- reactive({if (input$wifi == TRUE){
subset(data_1(), wifi == 1)} else{
data_1()
}
})
data_3 <- reactive({if (input$kitchen == TRUE){
subset(data_2(), kitchen == 1)} else{
data_2()
}
})
data_4 <- reactive({if (input$TV == TRUE){
subset(data_3(), TV == 1)} else{
data_3()
}
})
data_5 <- reactive({if (input$airconditioning == TRUE){
subset(data_4(), airconditioning == 1)} else{
data_4()
}
})
data_6 <- reactive({if (input$heating == TRUE){
subset(data_5(), heating == 1)} else{
data_5()
}
})
data_7 <- reactive({if (input$breakfast == TRUE){
subset(data_6(), breakfast == 1)} else{
data_6()
}
})
data_8 <- reactive({if (input$parking == TRUE){
subset(data_7(), parking == 1)} else{
data_7()
}
})
data_9 <- reactive({if (input$essentials == TRUE){
subset(data_8(), essentials == 1)} else{
data_8()
}
})
data_10 <- reactive({if (input$extras == TRUE){
subset(data_9(), extras == 1)} else{
data_9()
}
})
output$prices <- DT::renderDataTable({
listings_table <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021) %>%
select("Name" = name,
"Price ($)" = price,
"Neighborhood" = neighbourhood_cleansed,
"Property Type" = property_type,
"Accuracy Score" = review_scores_accuracy,
"Cleanliness Score" = review_scores_cleanliness,
"Check-in Score" = review_scores_checkin,
"Communication Score" = review_scores_communication,
"Location Score" = review_scores_location,
"Value Score" = review_scores_value,
"Link" = listing_url) %>%
mutate(Link = paste0("<a href='", Link,"' target='_blank' style=\"color:#FF5A5F;\">", "Link to Listing","</a>"))
}))
DT::datatable(listings_table(),
rownames = FALSE,
options = list(dom = 't',
pageLength = 8, scrollY = '300px', paging = FALSE, scrollX = TRUE,
columnDefs = list(list(className = 'dt-center', targets = '_all', class = 'hover', stripe = FALSE)),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'color': '#fff'});",
"}")),
escape = FALSE)
})
##### Text Output - Count #####
print_data <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021) %>%
nrow()}))
output$count <- renderText({
paste("There are", print_data(), "listings that match your filter.")
})
##### Map #####
output$map <- renderLeaflet({
data_1 <- reactive({if (input$workspace == TRUE){
subset(AB_All, workspace == 1)} else{
AB_All
}
})
data_2 <- reactive({if (input$wifi == TRUE){
subset(data_1(), wifi == 1)} else{
data_1()
}
})
data_3 <- reactive({if (input$kitchen == TRUE){
subset(data_2(), kitchen == 1)} else{
data_2()
}
})
data_4 <- reactive({if (input$TV == TRUE){
subset(data_3(), TV == 1)} else{
data_3()
}
})
data_5 <- reactive({if (input$airconditioning == TRUE){
subset(data_4(), airconditioning == 1)} else{
data_4()
}
})
data_6 <- reactive({if (input$heating == TRUE){
subset(data_5(), heating == 1)} else{
data_5()
}
})
data_7 <- reactive({if (input$breakfast == TRUE){
subset(data_6(), breakfast == 1)} else{
data_6()
}
})
data_8 <- reactive({if (input$parking == TRUE){
subset(data_7(), parking == 1)} else{
data_7()
}
})
data_9 <- reactive({if (input$essentials == TRUE){
subset(data_8(), essentials == 1)} else{
data_8()
}
})
data_10 <- reactive({if (input$extras == TRUE){
subset(data_9(), extras == 1)} else{
data_9()
}
})
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>% dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021) %>%
mutate(Link = paste0("<a href='", listing_url,"' target='_blank' style=\"color:#FF5A5F;\">", "Link to Listing","</a>"))
}))
leaflet(data_sub3()) %>%
setView(lng = -74.0060, lat = 40.7128, zoom = 10)  %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(data = data_sub3(),
lat = ~ latitude,
lng = ~ longitude,
weight = 2,
fillOpacity = 0.5,
color = "lightcoral",
popup = ~as.character(paste0(name, "<br>", "Price Per Night: $", price, "<br>",
"Value Score: ", review_scores_value, "<br>",
"Cleanliness Score: ", review_scores_cleanliness, "<br>", Link,"<br>"),
label = ~as.character(paste0("Price: ", sep = " ", price))
))
})
##### price vs. accuracy score scatter plot #####
output$accuracy_vs_price <- renderPlot({
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
ggplot(data_sub3(), aes(x = data_sub3()$review_scores_accuracy,y = data_sub3()$price)) +
geom_point(size = 4, alpha = 0.5, color = "brown1") +
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
axis.title = element_text(size=15,colour = "white"),
axis.text.x = element_text(size = 15,colour = "white"),
axis.text.y = element_text(size = 15,colour = "white")) +
labs(x = "Accuracy Review Score (1-10)", y = "Price($)")
})
##### price vs. cleanliness score scatter plot #####
output$clean_vs_price <- renderPlot({
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
ggplot(data_sub3(), aes(x = data_sub3()$review_scores_cleanliness,y = data_sub3()$price)) +
geom_point(size = 4, alpha = 0.5, color = "antiquewhite4") +
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
axis.title = element_text(size=15,colour = "white"),
axis.text.x = element_text(size = 15,colour = "white"),
axis.text.y = element_text(size = 15,colour = "white")) +
labs(x = "Cleanliness Review Score (1-10)", y = "Price($)")
})
##### price vs. checkin score scatter plot #####
output$checkin_vs_price <- renderPlot({
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
ggplot(data_sub3(), aes(x = data_sub3()$review_scores_checkin,y = data_sub3()$price)) +
geom_point(size = 4, alpha = 0.5, color = "brown1") +
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
axis.title = element_text(size=15,colour = "white"),
axis.text.x = element_text(size = 15,colour = "white"),
axis.text.y = element_text(size = 15,colour = "white")) +
labs(x = "Check-in Review Score (1-10)", y = "Price($)")
})
##### price vs. communication score scatter plot #####
output$communication_vs_price <- renderPlot({
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
ggplot(data_sub3(), aes(x = data_sub3()$review_scores_communication,y = data_sub3()$price)) +
geom_point(size = 4, alpha = 0.5, color = "antiquewhite4") +
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
axis.title = element_text(size=15,colour = "white"),
axis.text.x = element_text(size = 15,colour = "white"),
axis.text.y = element_text(size = 15,colour = "white")) +
labs(x = "Communication Review Score (1-10)", y = "Price($)")
})
##### price vs. location score scatter plot #####
output$location_vs_price <- renderPlot({
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
ggplot(data_sub3(), aes(x = data_sub3()$review_scores_location,y = data_sub3()$price)) +
geom_point(size = 4, alpha = 0.5, color = "brown1") +
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
axis.title = element_text(size=15,colour = "white"),
axis.text.x = element_text(size = 15,colour = "white"),
axis.text.y = element_text(size = 15,colour = "white")) +
labs(x = "Location Review Score (1-10)", y = "Price($)")
})
##### amenities + property_type recommendations #####
#note: file must be named app.R and you must hit "Run App" not run individual lines of code
output$amenitiesrec <- renderUI({if (input$staytype == "Business") {
img(src = "business.png", height = "175px")} else if (input$staytype == "Alone") {
img(src = "alone.png", height = "175px")} else if (input$staytype == "Friends") {
img(src = "friends.png", height = "175px")} else if (input$staytype == "Family") {
img(src = "family.png", height = "175px")}
})
##### price vs. value score scatter plot #####
output$value_vs_price <- renderPlot({
data_sub3 <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed %in% input$neighbourhood,
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
ggplot(data_sub3(), aes(x = data_sub3()$review_scores_value,y = data_sub3()$price)) +
geom_point(size = 5, alpha = 0.5, color = "antiquewhite4") +
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
axis.title = element_text(size=15,colour = "white"),
axis.text.x = element_text(size = 15,colour = "white"),
axis.text.y = element_text(size = 15,colour = "white")) +
labs(x = "Value Review Score (1-10)", y = "Price($)")
})
##### Wordcloud by neighborhood ####
output$wordcloudoverview <- renderUI({
plot_output_list <- lapply(1:length(input$neighbourhood), function(i) {
plotname1 <- paste("plot1", i, sep="")
plotOutput(plotname1)
})
# Convert the list to a tagList - this is necessary for the list of items
# to display properly.
do.call(tagList, plot_output_list)
})
list_new <-reactive({(input$neighbourhood)})
for (i in 1:5) {
local({
my_i<-i
plotname1 <- paste("plot1", my_i, sep="")
output[[plotname1]]<-renderPlot({
data_sub7 <- AB_All_new %>% dplyr::filter(neighbourhood_group_cleansed == list_new()[my_i])
wc <- data_sub7 %>%
group_by(word) %>%
summarise(N = sum(n)) %>%
arrange(desc(N))
set.seed(1234)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4),bg="#2B3E50")
plot.new()
text(x=0.5, y=0.5, list_new()[my_i],cex=2.5,col = "white")
suppressWarnings(
wordcloud(words = wc$word,
freq = wc$N,
min.freq = 600,
max.words = 50,
random.order = FALSE,
colors = "indianred1",
font = 7,
size = 1.6,
scale=c(18,0.7),
width=800,
height=400,
main='Title'))
})
})
}
##### Price by Neighborhood#####
output$pricebyn <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
r <- GET('http://data.beta.nyc//dataset/0ff93d2d-90ba-457c-9f7e-39e47bf2ac5f/resource/35dd04fb-81b3-479b-a074-a27a37888ce7/download/d085e2f8d0b54d4590b1e7d1f35594c1pediacitiesnycneighborhoods.geojson')
nyc_neighborhoods <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
leaflet(nyc_neighborhoods) %>%
addTiles() %>%
addPolygons(popup = ~neighborhood) %>%
addProviderTiles("CartoDB.Positron")
points <- data.frame(lat=AB_All$latitude, lng=AB_All$longitude,
price = AB_All$price,
neighborhood_group = AB_All$neighbourhood_group_cleansed,
guest = AB_All$accommodates)
points <- points %>%
filter(is.na(price) == 0)
points_spdf <- points
coordinates(points_spdf) <- ~lng + lat
proj4string(points_spdf) <- proj4string(nyc_neighborhoods)
matches <- over(points_spdf, nyc_neighborhoods)
points <- cbind(points, matches)
price_by_neighborhood <- points %>%
group_by(neighborhood_group,neighborhood,guest) %>%
summarize(price = mean(price))
price_by_neighborhood_2 <- price_by_neighborhood %>%
filter(neighborhood_group %in% input$neighbourhood &
guest >= input$accommodates)
map_data <- geo_join(nyc_neighborhoods, price_by_neighborhood_2, "neighborhood", "neighborhood")
colorset <- c("#ffcccd","#ff8a8d","#FF5A5F","#ad3638")
pal <- colorBin(palette = colorset,
domain = range(price_by_neighborhood_2$price),
bins = c(0,50,100,150,250,500,max(price_by_neighborhood_2$price)),
reverse = FALSE,
na.color = "#dbd5d5")
leaflet(map_data) %>%
addTiles() %>%
addPolygons(stroke = TRUE,
color = "#fcf2f5",
weight = 2,
fillColor = ~pal(price),
popup = ~neighborhood,
fillOpacity = 2) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-73.98, 40.75, zoom = 10)%>%
addLegend('topleft', pal=pal, values=price_by_neighborhood_2$price,
title='price', opacity=100)
})
##### Neighborhood listing number#####
output$plots <- renderUI({
plot_output_list <- lapply(1:length(input$neighbourhood), function(i) {
plotname <- paste("plot", i, sep="")
plotOutput(plotname)
})
do.call(tagList, plot_output_list)
})
list_new2 <-reactive({(input$neighbourhood)})
for (i in 1:5) {
local({
my_i<-i
plotname <- paste("plot", my_i, sep="")
output[[plotname]]<-renderPlot({
data_count <-eventReactive(input$viewlistings, ({data_10() %>%
dplyr:: filter(neighbourhood_group_cleansed == list_new2()[my_i],
accommodates %in% input$accommodates,
room_type %in% input$room_types_input,
year_m == 2021)
}))
if(nrow(data_count())!=0)
ggplot(data_count(),aes(x=data_count()$neighbourhood_cleansed))+geom_bar(position = position_dodge(width = 0.9, preserve = "single"),alpha = 0.7,fill = "brown1")+coord_flip()+
labs(x = "Neighbourhood", title = paste("Neighborhood: ",list_new2()[my_i]))+
theme(panel.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
plot.background = element_rect(fill="#2B3E50",colour="#2B3E50"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"),
title=element_text(size =15,colour = "white"),
axis.title = element_text(size =15,colour = "white"),
axis.text.x = element_text(size = 8,colour = "white"),
axis.text.y = element_text(size = 8,colour = "white"))
else
text(x=0.5,y=0.5,paste("Find no listings in ",list_new2()[my_i],"according to the filters"),cex=1.3)
})
})
}
##### Price Prediction #####
output$priceestimate <- renderText({
data_1_p <- reactive({if (input$workspace == TRUE){
subset(AB_pred, workspace == 1)} else{
AB_pred
}
})
data_2_p <- reactive({if (input$wifi == TRUE){
subset(data_1_p(), wifi == 1)} else{
data_1_p()
}
})
data_3_p <- reactive({if (input$kitchen == TRUE){
subset(data_2_p(), kitchen == 1)} else{
data_2_p()
}
})
data_4_p <- reactive({if (input$TV == TRUE){
subset(data_3_p(), TV == 1)} else{
data_3_p()
}
})
data_5_p <- reactive({if (input$airconditioning == TRUE){
subset(data_4_p(), airconditioning == 1)} else{
data_4_p()
}
})
data_6_p <- reactive({if (input$heating == TRUE){
subset(data_5_p(), heating == 1)} else{
data_5_p()
}
})
data_7_p <- reactive({if (input$breakfast == TRUE){
subset(data_6_p(), breakfast == 1)} else{
data_6_p()
}
})
data_8_p <- reactive({if (input$parking == TRUE){
subset(data_7_p(), parking == 1)} else{
data_7_p()
}
})
data_9_p <- reactive({if (input$essentials == TRUE){
subset(data_8_p(), essentials == 1)} else{
data_8_p()
}
})
data_10_p <- reactive({if (input$extras == TRUE){
subset(data_9_p(), extras == 1)} else{
data_9_p()
}
})
data_sub3 <-eventReactive(input$viewlistings, ({data_10_p() %>%
dplyr::filter(neighbourhood_group_cleansed %in% input$neighbourhood, room_type %in% input$room_types_input)}))
ctrl <- trainControl("cv", number = 10)
model <- train(price ~ accommodates,
data = data_sub3(),
method = "lm",
trControl = ctrl,
preProcess = c("range"))
accommodates <- input$accommodates
test <- data.frame(accommodates)
y_hat <- predict(model, newdata = test) %>% round(2)
paste("Based on your selections, the listing price should be about $", y_hat,"  ", " per night.")
})
}
shinyApp(ui = ui, server = server)
